var jcdeaux_key: node<String?>;

fn getKey(): String {
    if (jcdeaux_key.resolve() == null) {
        var tr = TextReader { path: "api_key.txt" };
        jcdeaux_key.set(tr.read());
    }

    return jcdeaux_key.resolve()!!;
}

fn importContracts() {
    var apiKey = jcdeaux_key.resolve() ?? getKey();

    var headers = [HttpHeader { name: "accept", value: "application/json" }];
    //Will return an array of objects with all the contracts
    var data = Http::get("https://api.jcdecaux.com/vls/v1/contracts?apiKey=${apiKey}", headers) as any?;

    //We append an ? to data in case it's null
    //Since in greycat all json objects are converted to a Map we can explicitly specify it in the for loop
    for (_, item: Map in data?) {
        //The name works as the identifier of the contract as explained in the JCDecaux API documentation
        var name = item.get("name") as String;
        //We check if the contract does not exists in the graph
        if (contracts_by_name.get(name) == null) {
            //Create the contract typed object
            var contract = Contract {
                name: name,
                cities: item.get("cities") as Array<String>,
                commercial_name: item.get("commercial_name") as String,
                country_code: item.get("country_code") as String,
                stations: nodeIndex<int, node<Station>> {},
            };

            //We create the contract node
            //This will make the contract persistent in the graph, for more information about **nodes** check the documentation
            var contractRef = node<Contract> {contract};

            //We add the contract to the index declared at top the biking module
            contracts_by_name.set(name, contractRef);
        }
    }
}
fn importStations() {
    var apiKey = jcdeaux_key.resolve() ?? getKey();

    var headers = [HttpHeader { name: "accept", value: "application/json" }];

    //Will return an array of objects with all the contracts
    var data = Http::get("https://api.jcdecaux.com/vls/v1/stations?apiKey=${apiKey}", headers) as any?;

    for (_, item: Map in data?) {
        //Get the station number, which is unique by contract
        var number = item.get("number") as int;

        //Get the contract name to get our locally stored contract indexed by contract name
        var contractName = item.get("contract_name") as String;
        var contract = contracts_by_name.get(contractName);

        if (contract == null) {
            //If the contract does not exist we skip the station, thiws could happen if since the last time we fetched the contracts a new contract with stations has been added, 
            // We could refetch the contracts but for the sake of simplicity we will just skip the station
            continue;
        }

        //Convert the position to a greycat geo object
        //here again we tell the lsp it's a Map since all json objects are converted to a Map
        var coordsMap = item.get("position") as Map;
        var coords = geo { coordsMap.get("lat") as float, coordsMap.get("lng") as float };


        var stationRef = contract->stations.get(number);

        if (stationRef == null) {
            var quantizer = MultiQuantizer<int> {
                quantizers: Array<LinearQuantizer<int>> {
                    LinearQuantizer<int> {min: 0, max: 6, bins: 7 },
                    LinearQuantizer<int> {min: 0, max: 23, bins: 24 }
                }
            };
            var stationProfile = StationProfile {
                hourlyProfile: GaussianProfile { quantizer: quantizer, precision: FloatPrecision::p10 },
            };

            var details = StationDetail {
                name: item.get("name") as String,
                address: item.get("address") as String,
                banking: item.get("banking") as bool,
                bonus: item.get("bonus") as bool,
            };

            var station = Station {
                number: number,
                position: coords,
                detail: node<StationDetail> {details},
                records: nodeTime<StationRecord> {},
                contract: contract,
                profile: node<StationProfile> {stationProfile}
            };

            stationRef = node<Station> {station};
            stations_by_geo.set(coords, stationRef);

            //We add the station to the contract
            contract->stations.set(number, stationRef);
        }



        //timestamp of the last update
        var lastUpdate = (item.get("last_update") as int?) ?? time::now().to(DurationUnit::milliseconds);
        //convert the timestamp to a greycat time
        var t = time::new(lastUpdate, DurationUnit::milliseconds);

        //We check if we alraedy have the data for this timestamp.
        if (stationRef->records.getAt(t) == null) {
            var record = StationRecord {
                status: stationStatusImportMapper(item.get("status") as String),
                available_bikes: item.get("available_bikes") as int,
                available_bike_stands: item.get("available_bike_stands") as int,
                bike_stands: item.get("bike_stands") as int,
            };
            stationRef->records.setAt(t, record);
            stationRef->profile->updateProfile(t, record);
        }
    }
}



//This function will map the string status to the enum
fn stationStatusImportMapper(string: String): StationStatus {
    if (string == "OPEN") {
        return StationStatus::open;
    } else {
        return StationStatus::closed;
    }
}

//This function will map the enum status to the string
fn stationStatusExportMapper(status: StationStatus): String {
    if (status == StationStatus::open) {
        return "OPEN";
    } else {
        return "CLOSED";
    }
}




/** The following code is to simply allow to load and dump data to launch the app with some data without requiring an api key*/

fn exportRecords() {
    for (_, contract in contracts_by_name) {
        for (number, station in contract->stations) {
            var cr = CsvWriter<InternalRecordsDTO> { path: "tmp/${contract->name}_${number}.csv", format: CsvFormat {} };

            for (key, data in station->records) {
                cr.write(InternalRecordsDTO {
                        time: key,
                        status: data.status,
                        availableBikes: data.available_bikes,
                        availableBikeStands: data.available_bike_stands,
                        bikeStands: data.bike_stands
                    });
            }
        }
    }
}


//export to a generic format
type InternalContractDTO {
    name: String;
    cities: Array<String>?;
    commercial_name: String?;
    country_code: String?;
    stations: Array<InternalStationDTO>;
}
type InternalStationDTO {
    number: int;
    position: geo;
    detail: StationDetail;
}
fn exportData() {
    var fw = JsonWriter { path: "tmp/data.ndjson" };

    for (_, contractRef in contracts_by_name) {
        var contract = contractRef.resolve();
        var contractObj = InternalContractDTO {
            name: contract.name,
            cities: contract.cities,
            commercial_name: contract.commercial_name,
            country_code: contract.country_code,
            stations: Array<InternalStationDTO> {}
        };
        for (_, value in contract.stations) {
            var station = value.resolve();
            var stationObj = InternalStationDTO {
                number: station.number,
                position: station.position,
                detail: station.detail.resolve(),
            };
            contractObj.stations.add(stationObj);
        }
        fw.writeln(contractObj);
    }
}

fn importData() {
    var fr = JsonReader<InternalContractDTO> { path: "tmp/data.ndjson" };

    while (fr.can_read()) {
        var contractObj = fr.read();

        var contract = Contract {
            name: contractObj.name,
            cities: contractObj.cities,
            commercial_name: contractObj.commercial_name,
            country_code: contractObj.country_code,
            stations: nodeIndex<int, node<Station>> {},
        };

        var contractRef = contracts_by_name .get(contract.name);

        if (contractRef == null) {
            contractRef = node<Contract> {contract};
            contracts_by_name.set(contract.name, contractRef);
        }

        for (_, stationObj in contractObj.stations) {
            var number = stationObj.number;

            //If the station already exists we skip it
            if (contract.stations.get(number) != null) {
                continue;
            }

            var stationDetail = StationDetail {
                name: stationObj.detail.name,
                address: stationObj.detail.address,
                banking: stationObj.detail.banking,
                bonus: stationObj.detail.bonus,
            };

            var quantizer = MultiQuantizer {
                quantizers: Array<Quantizer> {
                    LinearQuantizer {min: 0, max: 6, bins: 7 },
                    LinearQuantizer {min: 0, max: 23, bins: 24 }
                }
            };
            var stationProfile = StationProfile {
                hourlyProfile: GaussianProfile { quantizer: quantizer, precision: FloatPrecision::p10 },
            };

            var station = Station {
                number: stationObj.number,
                position: stationObj.position,
                detail: node<StationDetail> {stationDetail},
                records: nodeTime<StationRecord> {},
                contract: contractRef,
                profile: node<StationProfile> {stationProfile}
            };

            var stationRef = node<Station> {station};
            contract.stations.set(station.number, stationRef);
            stations_by_geo.set(station.position, stationRef);
        }
    }
}


// Used for importing and exporting for internal use only
@volatile
type InternalRecordsDTO {
    time: time;
    status: StationStatus;
    availableBikes: int;
    availableBikeStands: int;
    bikeStands: int;
}
fn importRecords() {
    var files = File::ls("tmp", ".csv", true);

    for (key, file in files) {
        var fileName = file.name();
        var split = fileName.indexOf('_');
        var stationNumber = fileName.slice(split + 1, fileName.size() - 4);
        var contractName = fileName.slice(0, split);
        var contract = contracts_by_name.get(contractName);
        var stationRef = contract?->stations.get(parseNumber(stationNumber) as int);

        if (stationRef == null) {
            continue;
        }

        var cr = CsvReader<InternalRecordsDTO> { path: file.path, format: CsvFormat {} };
        while (cr.can_read()) {
            var r = cr.read();

            var record = StationRecord {
                status: r.status,
                available_bikes: r.availableBikes,
                available_bike_stands: r.availableBikeStands,
                bike_stands: r.bikeStands,
            };

            stationRef->records.setAt(r.time, record);
            stationRef->profile->updateProfile(r.time, record);
        }
    }
}
